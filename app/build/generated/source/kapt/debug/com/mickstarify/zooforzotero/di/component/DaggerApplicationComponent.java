// Generated by Dagger (https://dagger.dev).
package com.mickstarify.zooforzotero.di.component;

import android.content.Context;
import com.google.errorprone.annotations.CanIgnoreReturnValue;
import com.mickstarify.zooforzotero.AttachmentManager.AttachmentManagerModel;
import com.mickstarify.zooforzotero.AttachmentManager.AttachmentManagerModel_MembersInjector;
import com.mickstarify.zooforzotero.LibraryActivity.LibraryActivityModel;
import com.mickstarify.zooforzotero.LibraryActivity.LibraryActivityModel_MembersInjector;
import com.mickstarify.zooforzotero.PreferenceManager;
import com.mickstarify.zooforzotero.SettingsActivity;
import com.mickstarify.zooforzotero.SettingsActivity_MembersInjector;
import com.mickstarify.zooforzotero.ZoteroStorage.AttachmentStorageManager;
import com.mickstarify.zooforzotero.ZoteroStorage.Database.ZoteroDatabase;
import com.mickstarify.zooforzotero.ZoteroStorage.ZoteroDB.ZoteroDB;
import com.mickstarify.zooforzotero.ZoteroStorage.ZoteroDB.ZoteroDB_MembersInjector;
import com.mickstarify.zooforzotero.di.module.ApplicationModule;
import com.mickstarify.zooforzotero.di.module.ApplicationModule_ProvideContextFactory;
import com.mickstarify.zooforzotero.di.module.ApplicationModule_ProvidePreferenceManagerFactory;
import com.mickstarify.zooforzotero.di.module.ApplicationModule_ProvidesAttachmentStorageManagerFactory;
import com.mickstarify.zooforzotero.di.module.DatabaseModule;
import com.mickstarify.zooforzotero.di.module.DatabaseModule_GetDatabaseFactory;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerApplicationComponent implements ApplicationComponent {
  private final ApplicationModule applicationModule;

  private Provider<Context> provideContextProvider;

  private Provider<ZoteroDatabase> getDatabaseProvider;

  private Provider<PreferenceManager> providePreferenceManagerProvider;

  private Provider<AttachmentStorageManager> providesAttachmentStorageManagerProvider;

  private DaggerApplicationComponent(ApplicationModule applicationModuleParam,
      DatabaseModule databaseModuleParam) {
    this.applicationModule = applicationModuleParam;
    initialize(applicationModuleParam, databaseModuleParam);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final ApplicationModule applicationModuleParam,
      final DatabaseModule databaseModuleParam) {
    this.provideContextProvider = ApplicationModule_ProvideContextFactory.create(applicationModuleParam);
    this.getDatabaseProvider = DoubleCheck.provider(DatabaseModule_GetDatabaseFactory.create(databaseModuleParam, provideContextProvider));
    this.providePreferenceManagerProvider = DoubleCheck.provider(ApplicationModule_ProvidePreferenceManagerFactory.create(applicationModuleParam, provideContextProvider));
    this.providesAttachmentStorageManagerProvider = DoubleCheck.provider(ApplicationModule_ProvidesAttachmentStorageManagerFactory.create(applicationModuleParam, provideContextProvider, providePreferenceManagerProvider));
  }

  @Override
  public Context getContext() {
    return ApplicationModule_ProvideContextFactory.provideContext(applicationModule);}

  @Override
  public void inject(LibraryActivityModel libraryActivityModel) {
    injectLibraryActivityModel(libraryActivityModel);}

  @Override
  public void inject(SettingsActivity settingsActivity) {
    injectSettingsActivity(settingsActivity);}

  @Override
  public void inject(AttachmentManagerModel attachmentManagerModel) {
    injectAttachmentManagerModel(attachmentManagerModel);}

  @Override
  public void inject(AttachmentStorageManager attachmentStorageManager) {
  }

  @Override
  public void inject(ZoteroDB zoteroDB) {
    injectZoteroDB(zoteroDB);}

  @CanIgnoreReturnValue
  private LibraryActivityModel injectLibraryActivityModel(LibraryActivityModel instance) {
    LibraryActivityModel_MembersInjector.injectZoteroDatabase(instance, getDatabaseProvider.get());
    LibraryActivityModel_MembersInjector.injectAttachmentStorageManager(instance, providesAttachmentStorageManagerProvider.get());
    LibraryActivityModel_MembersInjector.injectPreferences(instance, providePreferenceManagerProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private SettingsActivity injectSettingsActivity(SettingsActivity instance) {
    SettingsActivity_MembersInjector.injectMyStorageManager(instance, providesAttachmentStorageManagerProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private AttachmentManagerModel injectAttachmentManagerModel(AttachmentManagerModel instance) {
    AttachmentManagerModel_MembersInjector.injectZoteroDatabase(instance, getDatabaseProvider.get());
    AttachmentManagerModel_MembersInjector.injectAttachmentStorageManager(instance, providesAttachmentStorageManagerProvider.get());
    AttachmentManagerModel_MembersInjector.injectPreferenceManager(instance, providePreferenceManagerProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private ZoteroDB injectZoteroDB(ZoteroDB instance) {
    ZoteroDB_MembersInjector.injectZoteroDatabase(instance, getDatabaseProvider.get());
    return instance;
  }

  public static final class Builder {
    private ApplicationModule applicationModule;

    private DatabaseModule databaseModule;

    private Builder() {
    }

    public Builder applicationModule(ApplicationModule applicationModule) {
      this.applicationModule = Preconditions.checkNotNull(applicationModule);
      return this;
    }

    public Builder databaseModule(DatabaseModule databaseModule) {
      this.databaseModule = Preconditions.checkNotNull(databaseModule);
      return this;
    }

    public ApplicationComponent build() {
      Preconditions.checkBuilderRequirement(applicationModule, ApplicationModule.class);
      if (databaseModule == null) {
        this.databaseModule = new DatabaseModule();
      }
      return new DaggerApplicationComponent(applicationModule, databaseModule);
    }
  }
}
